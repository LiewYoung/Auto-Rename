"""
This module provides a command-line interface for automatically renaming files.

It uses the ReadFile module to extract text from files and the api_chat module
to generate new filenames (titles) based on the extracted text. The script
processes files in a specified directory.
"""
import argparse
from pathlib import Path
from typing import Generator, List # For Python 3.9+ list can be used directly for List

from api_chat import Chat # Explicitly importing Chat for type hinting
from ReadFile import ReadFile

    
def get_titles(paths: List[Path], bot: Chat) -> Generator[str, None, None]:
    """
    Generates titles for a list of file paths using the Chat bot.

    It reads content from each file and yields a title generated by the bot.
    The comment about token saving is noted from original code.

    :param paths: A list of Path objects representing the files to process.
    :param bot: An instance of the Chat class used for generating titles.
    :return: A generator yielding a title string for each file.
    """
    for file_path in paths:
        # Assuming ReadFile constructor takes Path object or string path
        file_reader = ReadFile(file_path)
        # to save tokens so it limit 1024 (comment from original code)
        content: str = file_reader.get_file()
        title: str = bot.get_title(content)
        yield title

    

def main(directory_path: Path) -> None:
    """
    Main function to process files in a directory and rename them.

    It initializes the Chat bot, iterates through files in the given directory,
    generates new titles, and renames the files. It provides feedback on
    the process and handles potential errors.

    :param directory_path: The Path object representing the directory to process.
    """
    try:
        chat_bot = Chat(log=True)
    except Exception as e:
        print(f"Failed to initialize the Chat bot: {e}")
        print("Please ensure config.json is correctly set up.")
        return

    # Use list[Path] for Python 3.9+
    manger_path: List[Path] = [file_path for file_path in directory_path.iterdir() if file_path.is_file()]
    
    if not manger_path:
        print(f"No files found in directory: {directory_path}")
        return

    print(f"Found {len(manger_path)} file(s) to process in {directory_path}")

    manger_title_generator: Generator[str, None, None] = get_titles(manger_path, chat_bot)

    for current_file_path in manger_path: # Renamed path to current_file_path for clarity
        try: 
            print(f"Processing file: {current_file_path.name}")

            new_title: str = next(manger_title_generator)
            # Sanitize new_title if it might contain problematic characters for filenames
            # For now, assume titles are safe or api_chat.py handles this.
            new_name_with_extension: str = new_title + current_file_path.suffix.lower()

            target_path: Path = current_file_path.parent / new_name_with_extension

            # Check if source and target are the same (e.g. title didn't change)
            if current_file_path == target_path:
                print(f"Skipping rename for {current_file_path.name}, new name is identical.")
                continue

            current_file_path.rename(target_path)
            print(f"Successfully renamed to: {new_name_with_extension}")

        except PermissionError:
            print(f"Error: Permission denied. Could not rename {current_file_path.name}. The file might be open or in use.")
        except StopIteration:
            # This should ideally not be reached if get_titles yields one title per path.
            # If it does, it means get_titles stopped producing titles unexpectedly.
            print(f"Error: No more titles available from the generator for file {current_file_path.name}. Stopping.")
            break
        except FileExistsError:
            print(f"Error: File already exists: {new_name_with_extension}")
        except Exception as e:
            # Catching generic Exception to provide more details if unexpected error occurs
            print(f"An unexpected error occurred while processing {current_file_path.name}: {type(e).__name__} - {e}")
        
        
   


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Automatically rename files in a directory using AI-generated titles. "\
                    "Ensure config.json is set up with your API key."
    )
    parser.add_argument(
        "directory",
        type=str,
        help="Path to the directory containing files to rename."
    )
    args = parser.parse_args()

    # Convert string path to Path object
    directory_arg_path: Path = Path(args.directory)

    if not directory_arg_path.is_dir():
        print(f"Error: The provided path '{args.directory}' is not a valid directory.")
    else:
        print(f"Starting file renaming process for directory: {directory_arg_path}")
        main(directory_arg_path)
        print("File renaming process completed.")
